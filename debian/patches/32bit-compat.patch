From 778506ed7d0efc9899d419cf31e0bf7e25cf9420 Mon Sep 17 00:00:00 2001
From: "Adam C. Emerson" <aemerson@redhat.com>
Date: Thu, 31 Mar 2016 14:50:06 -0400
Subject: [PATCH 1/2] time: Change temporary variable types in time decode

Since we're decoding 32-bit integers, just use uint32_t and then cast them to
what utime_t expects.

Fixes: http://tracker.ceph.com/issues/15330
Signed-off-by: Adam C. Emerson <aemerson@redhat.com>
---
 src/common/ceph_time.h | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

--- a/src/common/ceph_time.h
+++ b/src/common/ceph_time.h
@@ -382,10 +382,13 @@ void encode(const std::chrono::time_poin
 template<typename Clock, typename Duration>
 void decode(std::chrono::time_point<Clock, Duration>& t,
 	    bufferlist::iterator& p) {
-  uint32_t s, ns;
+  uint32_t s;
+  uint32_t ns;
   ::decode(s, p);
   ::decode(ns, p);
-  struct timespec ts = {s, ns};
+  struct timespec ts = {
+    static_cast<time_t>(s),
+    static_cast<long int>(ns)};
 
   t = Clock::from_timespec(ts);
 }
--- a/src/cls/rgw/cls_rgw_ops.h
+++ b/src/cls/rgw/cls_rgw_ops.h
@@ -180,7 +180,7 @@ struct rgw_cls_link_olh_op {
     ::encode(olh_epoch, bl);
     ::encode(log_op, bl);
     ::encode(bilog_flags, bl);
-    time_t t = ceph::real_clock::to_time_t(unmod_since);
+    uint64_t t = ceph::real_clock::to_time_t(unmod_since);
     ::encode(t, bl);
     ::encode(unmod_since, bl);
     ::encode(high_precision_time, bl);
@@ -198,9 +198,9 @@ struct rgw_cls_link_olh_op {
     ::decode(log_op, bl);
     ::decode(bilog_flags, bl);
     if (struct_v == 2) {
-      time_t t;
+      uint64_t t;
       ::decode(t, bl);
-      unmod_since = ceph::real_clock::from_time_t(t);
+      unmod_since = ceph::real_clock::from_time_t(static_cast<time_t>(t));
     }
     if (struct_v >= 3) {
       ::decode(unmod_since, bl);
